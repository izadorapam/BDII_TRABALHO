-- ==================================================
--   ============= FUNÇÕES DE CADASTRO ===============
-- ==================================================

CREATE OR REPLACE FUNCTION CADASTRAR_CLIENTE(
    P_ID INT,
    P_NOME VARCHAR,
    P_ENDERECO VARCHAR,
    P_TELEFONE VARCHAR,
    P_EMAIL VARCHAR
) RETURNS TEXT AS $$
BEGIN
    IF EXISTS (SELECT 1 FROM CLIENTE WHERE ID_CLIENTE = P_ID) THEN
        RETURN 'ERRO: ID DE CLIENTE JÁ EXISTE.';
    END IF;
    
    IF P_EMAIL NOT LIKE '%@%.%' THEN
        RETURN 'ERRO: FORMATO DE EMAIL INVÁLIDO.';
    END IF;
    
    INSERT INTO CLIENTE VALUES (P_ID, P_NOME, P_ENDERECO, P_TELEFONE, P_EMAIL);
    
    RETURN 'CLIENTE CADASTRADO COM SUCESSO. ID: ' || P_ID;
    
EXCEPTION WHEN OTHERS THEN
    RETURN 'ERRO AO CADASTRAR CLIENTE: ' || SQLERRM;
END;
$$ LANGUAGE PLPGSQL;

-- --------------------------------------------------

CREATE OR REPLACE FUNCTION CADASTRAR_FUNCIONARIO(
    P_ID INT,
    P_NOME VARCHAR,
    P_TELEFONE VARCHAR,
    P_EMAIL VARCHAR,
    P_CARGO VARCHAR
) RETURNS TEXT AS $$
BEGIN
    IF EXISTS (SELECT 1 FROM FUNCIONARIO WHERE ID_FUNCIONARIO = P_ID) THEN
        RETURN 'ERRO: ID ' || P_ID || ' JÁ ESTÁ CADASTRADO PARA OUTRO FUNCIONÁRIO';
    END IF;
    
    IF P_EMAIL NOT LIKE '%@%.%' THEN
        RETURN 'ERRO: FORMATO DE E-MAIL INVÁLIDO';
    END IF;
    
    IF P_TELEFONE !~ '^[0-9]{10,11}$' THEN
        RETURN 'ERRO: TELEFONE DEVE CONTER 10 OU 11 DÍGITOS NUMÉRICOS';
    END IF;
    
    INSERT INTO FUNCIONARIO VALUES (P_ID, P_NOME, P_TELEFONE, P_EMAIL, P_CARGO);
    
    RETURN 'SUCESSO: FUNCIONÁRIO ' || P_NOME || ' CADASTRADO COM ID ' || P_ID;
    
EXCEPTION WHEN OTHERS THEN
    RETURN 'ERRO: FALHA AO CADASTRAR FUNCIONÁRIO - ' || SQLERRM;
END;
$$ LANGUAGE PLPGSQL;

-- --------------------------------------------------

CREATE OR REPLACE FUNCTION CADASTRAR_FORNECEDOR(
    P_ID INT,
    P_NOME VARCHAR,
    P_TELEFONE VARCHAR,
    P_EMAIL VARCHAR
) RETURNS VOID AS $$
BEGIN
    INSERT INTO FORNECEDOR VALUES (P_ID, P_NOME, P_TELEFONE, P_EMAIL);
END;
$$ LANGUAGE PLPGSQL;

-- --------------------------------------------------

CREATE OR REPLACE FUNCTION CADASTRAR_PRODUTO(
    P_ID INT,
    P_ESTOQUE INT,
    P_NOME VARCHAR,
    P_PRECO DECIMAL,
    P_TIPO VARCHAR,
    P_COMPOE INT
) RETURNS TEXT AS $$
BEGIN
    IF EXISTS (SELECT 1 FROM PRODUTO WHERE ID_PRODUTO = P_ID) THEN
        RETURN 'ERRO: PRODUTO COM ID ' || P_ID || ' JÁ EXISTE';
    END IF;
    
    IF P_COMPOE IS NOT NULL AND NOT EXISTS (SELECT 1 FROM PRODUTO WHERE ID_PRODUTO = P_COMPOE) THEN
        RETURN 'ERRO: PRODUTO COMPONENTE ' || P_COMPOE || ' NÃO ENCONTRADO';
    END IF;
    
    INSERT INTO PRODUTO VALUES (P_ID, P_ESTOQUE, P_NOME, P_PRECO, P_TIPO, P_COMPOE);
    
    RETURN 'PRODUTO CADASTRADO COM SUCESSO. ID: ' || P_ID;
    
EXCEPTION WHEN OTHERS THEN
    RETURN 'ERRO AO CADASTRAR PRODUTO: ' || SQLERRM;
END;
$$ LANGUAGE PLPGSQL;

-- ==================================================
--   ========== FUNÇÕES DE ATUALIZAÇÃO ================
-- ==================================================

CREATE OR REPLACE FUNCTION ATUALIZAR_ESTOQUE(
    P_ID INT,
    P_QUANTIDADE INT
) RETURNS VOID AS $$
BEGIN
    UPDATE PRODUTO SET ESTOQUE = P_QUANTIDADE WHERE ID_PRODUTO = P_ID;
END;
$$ LANGUAGE PLPGSQL;

-- --------------------------------------------------

CREATE OR REPLACE FUNCTION ATUALIZAR_ESTOQUE_COMPRA() RETURNS TRIGGER AS $$
BEGIN
    UPDATE PRODUTO SET ESTOQUE = ESTOQUE + NEW.QUANT WHERE ID_PRODUTO = NEW.ID_PRODUTO;
    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER TRG_ESTOQUE_COMPRA
AFTER INSERT ON ITEM_COMPRA
FOR EACH ROW
EXECUTE FUNCTION ATUALIZAR_ESTOQUE_COMPRA();

-- --------------------------------------------------

CREATE OR REPLACE FUNCTION ATUALIZAR_ESTOQUE_PEDIDO() RETURNS TRIGGER AS $$
BEGIN
    IF (SELECT ATIVO FROM PEDIDO WHERE ID_PEDIDO = NEW.ID_PEDIDO) = FALSE THEN
        RAISE EXCEPTION 'PEDIDO INATIVO: %', NEW.ID_PEDIDO;
    END IF;
    
    IF (SELECT ATIVO FROM PRODUTO WHERE ID_PRODUTO = NEW.ID_PRODUTO) = FALSE THEN
        RAISE EXCEPTION 'PRODUTO INATIVO: %', NEW.ID_PRODUTO;
    END IF;
    
    IF (SELECT ESTOQUE FROM PRODUTO WHERE ID_PRODUTO = NEW.ID_PRODUTO) < NEW.QUANT THEN
        RAISE EXCEPTION 'ESTOQUE INSUFICIENTE PARA O PRODUTO %', NEW.ID_PRODUTO;
    END IF;
    
    UPDATE PRODUTO SET ESTOQUE = ESTOQUE - NEW.QUANT WHERE ID_PRODUTO = NEW.ID_PRODUTO;
    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER TRG_ESTOQUE_PEDIDO
BEFORE INSERT ON ITEM_PEDIDO
FOR EACH ROW
EXECUTE FUNCTION ATUALIZAR_ESTOQUE_PEDIDO();

-- ==================================================
--   =========== FUNÇÕES DE REMOÇÃO ===================
-- ==================================================

CREATE OR REPLACE FUNCTION REMOVER_CLIENTE(P_ID INT) RETURNS TEXT AS $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM CLIENTE WHERE ID_CLIENTE = P_ID) THEN
        RETURN 'ERRO: CLIENTE NÃO ENCONTRADO.';
    END IF;
    
    IF EXISTS (SELECT 1 FROM PEDIDO WHERE ID_CLIENTE = P_ID AND ATIVO = TRUE) THEN
        RETURN 'ERRO: CLIENTE POSSUI PEDIDOS ATIVOS ASSOCIADOS.';
    END IF;
    
    UPDATE CLIENTE SET ATIVO = FALSE WHERE ID_CLIENTE = P_ID;
    
    RETURN 'CLIENTE MARCADO COMO INATIVO COM SUCESSO. ID: ' || P_ID;
EXCEPTION WHEN OTHERS THEN
    RETURN 'ERRO AO REMOVER CLIENTE: ' || SQLERRM;
END;
$$ LANGUAGE PLPGSQL;

-- Bloco de teste para REMOVER_CLIENTE (mantido como no original)
DO $$
DECLARE
    IDS INT[] := ARRAY[15, 10, 3];
    ID INT;
    RESULTADO TEXT;
BEGIN
    FOREACH ID IN ARRAY IDS
    LOOP
        RESULTADO := REMOVER_CLIENTE(ID);
        RAISE NOTICE 'CLIENTE %: %', ID, RESULTADO;
    END LOOP;
END;
$$;

-- --------------------------------------------------

CREATE OR REPLACE FUNCTION REMOVER_PRODUTO(P_ID INT) RETURNS TEXT AS $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM PRODUTO WHERE ID_PRODUTO = P_ID) THEN
        RETURN 'ERRO: PRODUTO NÃO ENCONTRADO.';
    END IF;
    
    IF EXISTS (SELECT 1 FROM ITEM_PEDIDO IP JOIN PEDIDO P ON IP.ID_PEDIDO = P.ID_PEDIDO
               WHERE IP.ID_PRODUTO = P_ID AND P.ATIVO = TRUE) THEN
        RETURN 'ERRO: PRODUTO ESTÁ EM PEDIDOS ATIVOS.';
    END IF;
    
    IF EXISTS (SELECT 1 FROM COMPOSICAO_PRONTA
               WHERE (ID_PROD_COMP1 = P_ID OR ID_PROD_COMP2 = P_ID) AND ATIVO = TRUE) THEN
        RETURN 'ERRO: PRODUTO ESTÁ EM COMPOSIÇÕES ATIVAS.';
    END IF;
    
    UPDATE PRODUTO SET ATIVO = FALSE WHERE ID_PRODUTO = P_ID;
    
    RETURN 'PRODUTO MARCADO COMO INATIVO COM SUCESSO. ID: ' || P_ID;
EXCEPTION WHEN OTHERS THEN
    RETURN 'ERRO AO REMOVER PRODUTO: ' || SQLERRM;
END;
$$ LANGUAGE PLPGSQL;

-- ==================================================
--   ========== FUNÇÕES DE REGISTRO ===================
-- ==================================================

CREATE OR REPLACE FUNCTION REGISTRAR_PEDIDO(
    P_ID_PEDIDO INT,
    P_ID_CLIENTE INT,
    P_TELEFONE VARCHAR,
    P_ID_FUNCIONARIO INT,
    P_ID_PRODUTO1 INT,
    P_QUANT1 INT,
    P_VALOR1 DECIMAL,
    P_ID_PRODUTO2 INT DEFAULT NULL,
    P_QUANT2 INT DEFAULT NULL,
    P_VALOR2 DECIMAL DEFAULT NULL
) RETURNS TEXT AS $$
DECLARE
    V_CLIENTE_EXISTE BOOLEAN;
    V_FUNCIONARIO_EXISTE BOOLEAN;
    V_PRODUTO_EXISTE BOOLEAN;
    V_TOTAL_PEDIDO DECIMAL(10,2);
BEGIN
    SELECT EXISTS (SELECT 1 FROM CLIENTE WHERE ID_CLIENTE = P_ID_CLIENTE) INTO V_CLIENTE_EXISTE;
    IF NOT V_CLIENTE_EXISTE THEN
        RETURN 'ERRO: CLIENTE COM ID ' || P_ID_CLIENTE || ' NÃO ENCONTRADO';
    END IF;

    SELECT EXISTS (SELECT 1 FROM FUNCIONARIO WHERE ID_FUNCIONARIO = P_ID_FUNCIONARIO) INTO V_FUNCIONARIO_EXISTE;
    IF NOT V_FUNCIONARIO_EXISTE THEN
        RETURN 'ERRO: FUNCIONÁRIO COM ID ' || P_ID_FUNCIONARIO || ' NÃO ENCONTRADO';
    END IF;

    SELECT EXISTS (SELECT 1 FROM PRODUTO WHERE ID_PRODUTO = P_ID_PRODUTO1) INTO V_PRODUTO_EXISTE;
    IF NOT V_PRODUTO_EXISTE THEN
        RETURN 'ERRO: PRODUTO COM ID ' || P_PRODUTO1 || ' NÃO ENCONTRADO';
    END IF;

    IF P_ID_PRODUTO2 IS NOT NULL THEN
        SELECT EXISTS (SELECT 1 FROM PRODUTO WHERE ID_PRODUTO = P_ID_PRODUTO2) INTO V_PRODUTO_EXISTE;
        IF NOT V_PRODUTO_EXISTE THEN
            RETURN 'ERRO: PRODUTO COM ID ' || P_ID_PRODUTO2 || ' NÃO ENCONTRADO';
        END IF;
    END IF;

    V_TOTAL_PEDIDO := (P_QUANT1 * P_VALOR1);
    IF P_ID_PRODUTO2 IS NOT NULL THEN
        V_TOTAL_PEDIDO := V_TOTAL_PEDIDO + (P_QUANT2 * P_VALOR2);
    END IF;

    INSERT INTO PEDIDO VALUES (P_ID_PEDIDO, P_ID_CLIENTE, P_TELEFONE, V_TOTAL_PEDIDO, P_ID_FUNCIONARIO);

    INSERT INTO ITEM_PEDIDO(ID_PEDIDO, ID_PRODUTO, QUANT, VALOR_UNITARIO)
    VALUES (P_ID_PEDIDO, P_ID_PRODUTO1, P_QUANT1, P_VALOR1);

    IF P_ID_PRODUTO2 IS NOT NULL THEN
        INSERT INTO ITEM_PEDIDO(ID_PEDIDO, ID_PRODUTO, QUANT, VALOR_UNITARIO)
        VALUES (P_ID_PEDIDO, P_ID_PRODUTO2, P_QUANT2, P_VALOR2);
    END IF;

    RETURN 'SUCESSO: PEDIDO ' || P_ID_PEDIDO || ' REGISTRADO COM TOTAL R$ ' || V_TOTAL_PEDIDO;

EXCEPTION WHEN OTHERS THEN
    RETURN 'ERRO: FALHA AO REGISTRAR PEDIDO - ' || SQLERRM;
END;
$$ LANGUAGE PLPGSQL;

-- --------------------------------------------------

CREATE OR REPLACE FUNCTION REGISTRAR_COMPRA(
    P_ID_COMPRA INT,
    P_ID_FORNECEDOR INT,
    P_DATA DATE,
    P_ID_FUNCIONARIO INT,
    P_ID_PRODUTO1 INT,
    P_QUANT1 INT,
    P_VALOR1 DECIMAL,
    P_ID_PRODUTO2 INT DEFAULT NULL,
    P_QUANT2 INT DEFAULT NULL,
    P_VALOR2 DECIMAL DEFAULT NULL
) RETURNS VOID AS $$
BEGIN
    INSERT INTO COMPRA VALUES (P_ID_COMPRA, P_ID_FORNECEDOR, P_DATA, 0, P_ID_FUNCIONARIO);

    INSERT INTO ITEM_COMPRA(ID_COMPRA, ID_PRODUTO, QUANT, VALOR_UNITARIO)
    VALUES (P_ID_COMPRA, P_ID_PRODUTO1, P_QUANT1, P_VALOR1);

    IF P_ID_PRODUTO2 IS NOT NULL THEN
        INSERT INTO ITEM_COMPRA(ID_COMPRA, ID_PRODUTO, QUANT, VALOR_UNITARIO)
        VALUES (P_ID_COMPRA, P_ID_PRODUTO2, P_QUANT2, P_VALOR2);
    END IF;
END;
$$ LANGUAGE PLPGSQL;

-- ==================================================
--   ==================================================
-- ==================================================
